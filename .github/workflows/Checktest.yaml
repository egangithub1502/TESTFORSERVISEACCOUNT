name: List and Deploy PR Changed Files

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:

jobs:
  check-issue:
    if: github.event_name == 'issues' && github.event.label.name == 'approved'
    runs-on: ubuntu-latest
    steps:
      - name: Print Issue Approval
        run: echo "Issue approved and action triggered."

  list-files:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'issues' && github.event.label.name == 'approved')
    needs: check-issue
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.check.outputs.changed_files }}
      target_branch: ${{ steps.check.outputs.target_branch }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Get PR Base Branch and Changed Files
        id: check
        env:
          GH_TOKEN: ${{ secrets.JEGANMERGE }}
        run: |
          pr_number=${{ github.event.issue.number }}
          echo "PR Number: $pr_number"
          # Get the base branch (e.g., master or develop)
          target_branch=$(gh pr view "$pr_number" --json baseRefName --jq '.baseRefName')
          echo "Base branch: $target_branch"
          echo "target_branch=$target_branch" >> $GITHUB_ENV
          echo "::set-output name=target_branch::$target_branch"
          
          # Get changed files in the PR
          changed_files=$(gh pr view "$pr_number" --json files --jq '.files[].path')
          echo "Changed files from gh command: $changed_files"
          changed_files_single_line=$(echo "$changed_files" | tr '\n' ' ')
          echo "changed_files=$changed_files_single_line" >> $GITHUB_ENV
          echo "::set-output name=changed_files::$changed_files_single_line"

      - name: Send notification to Google Chat - Files Found
        if: success() && steps.check.outputs.changed_files != ''
        run: |
          curl -X POST "${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}" \
          -H 'Content-Type: application/json' \
          -d "$(jq -n --arg text "Issue #${{ github.event.issue.number }}: Changed files detected for branch ${{ steps.check.outputs.target_branch }}: ${{ steps.check.outputs.changed_files }}" '{text: $text}')"

  deploy:
    if: github.event_name == 'issues' && github.event.label.name == 'approved'
    runs-on: ubuntu-latest
    needs: list-files
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Environment Variables Based on Base Branch
        run: |
          branch="${{ needs.list-files.outputs.target_branch }}"
          case "$branch" in
            "develop")
              echo "DEPLOY_PATH=/var/www/www_profitokrs_com_6_4_1" >> $GITHUB_ENV
              echo "BACKUP_PATH=/home/Jegan/profit-site-en-backup" >> $GITHUB_ENV
              echo "GIT_PATH=/home/Jegan/git-rsync-en" >> $GITHUB_ENV
              echo "VM_USER=${{ secrets.GCP_VM_USERNAME }}" >> $GITHUB_ENV
              echo "VM_INSTANCE=${{ secrets.GCP_VM_INSTANCE_NAME }}" >> $GITHUB_ENV
              echo "VM_ZONE=${{ secrets.GCP_VM_ZONE }}" >> $GITHUB_ENV
              echo "GOOGLE_CLOUD_KEY=${{ secrets.GOOGLE_CLOUD_KEY_DEV }}" >> $GITHUB_ENV
              echo "GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT_DEV }}" >> $GITHUB_ENV
              ;;
            "master")
              echo "DEPLOY_PATH=/var/www/master_server_path" >> $GITHUB_ENV
              echo "BACKUP_PATH=/home/Jegan/master_backup" >> $GITHUB_ENV
              echo "GIT_PATH=/home/Jegan/master_git_path" >> $GITHUB_ENV
              echo "VM_USER=${{ secrets.MASTER_VM_USERNAME }}" >> $GITHUB_ENV
              echo "VM_INSTANCE=${{ secrets.MASTER_VM_INSTANCE_NAME }}" >> $GITHUB_ENV
              echo "VM_ZONE=${{ secrets.MASTER_VM_ZONE }}" >> $GITHUB_ENV
              echo "GOOGLE_CLOUD_KEY=${{ secrets.GOOGLE_CLOUD_KEY_MASTER }}" >> $GITHUB_ENV
              echo "GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT_MASTER }}" >> $GITHUB_ENV
              ;;
            *)
              echo "No deployment for this branch"
              exit 0
              ;;
          esac

      - name: Deploy Changed Files to Specific VM
        if: success() && needs.list-files.outputs.changed_files != ''
        env:
          GOOGLE_CLOUD_PROJECT: ${{ env.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_KEY: ${{ env.GOOGLE_CLOUD_KEY }}  # Base64-encoded service account key
          DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
          BACKUP_PATH: ${{ env.BACKUP_PATH }}
          GIT_PATH: ${{ env.GIT_PATH }}
          VM_USER: ${{ env.VM_USER }}
          VM_INSTANCE: ${{ env.VM_INSTANCE }}
          VM_ZONE: ${{ env.VM_ZONE }}
        run: |
          # Deployment logic here
