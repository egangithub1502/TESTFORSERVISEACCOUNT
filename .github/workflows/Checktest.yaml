name: List and Deploy PR Changed Files

on:
  pull_request:
    types: [closed]
    branches:
      - develop

jobs:
  list-files:
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.check.outputs.changed_files }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh
          
      - name: Get PR number and check changed files
        id: check
        env:
          GH_TOKEN: ${{ secrets.JEGANMERGE }}
        run: |
          pr_number=${{ github.event.pull_request.number }}
          echo "PR Number: $pr_number"
          changed_files=$(gh pr view "$pr_number" --json files --jq '.files[].path')
          echo "Changed files from gh command: $changed_files"
          changed_files_single_line=$(echo "$changed_files" | tr '\n' ' ')
          echo "changed_files=$changed_files_single_line" >> $GITHUB_ENV
          echo "::set-output name=changed_files::$changed_files_single_line"

  deploy:
    runs-on: ubuntu-latest
    needs: list-files

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get changed files from previous step
        id: get_changed_files
        run: |
          changed_files="${{ needs.list-files.outputs.changed_files }}"
          echo "Changed files: $changed_files"
          echo "$changed_files" > changed_files.txt

      - name: Check if changed files are present
        run: |
          if [ -s changed_files.txt ]; then
            echo "Changed files detected, proceeding with deployment."
          else
            echo "No changed files found, skipping deployment."
            exit 0
          fi

      - name: Deploy Changed Files to Specific VM
        if: success() && needs.list-files.outputs.changed_files != ''
        env:
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_KEY: ${{ secrets.GOOGLE_CLOUD_KEY }}  # Base64-encoded service account key
          DEPLOY_PATH: "/var/www/www_profitokrs_com_6_4_1"
          BACKUP_PATH: "/home/Jegan/profit-site-en-backup"
        run: |
          # Decode Google Cloud key
          echo "$GOOGLE_CLOUD_KEY" | base64 --decode > service-account.json
          gcloud auth activate-service-account --key-file=service-account.json
          gcloud config set project $GOOGLE_CLOUD_PROJECT
          
          changed_files="${{ needs.list-files.outputs.changed_files }}"
          if [ -z "$changed_files" ]; then
            echo "No files to deploy."
            exit 0
          fi

          files=($changed_files)
          for file in "${files[@]}"; do
            echo "Checking if $file exists in the deploy path..."
            if gcloud compute ssh "${{ secrets.GCP_VM_USERNAME }}@${{ secrets.GCP_VM_INSTANCE_NAME }}" --zone=${{ secrets.GCP_VM_ZONE }} --project=$GOOGLE_CLOUD_PROJECT -- "test -f '$DEPLOY_PATH/$file'"; then
              echo "$file exists in the deploy path, backing it up."
              backup_date=$(gcloud compute ssh "${{ secrets.GCP_VM_USERNAME }}@${{ secrets.GCP_VM_INSTANCE_NAME }}" --zone=${{ secrets.GCP_VM_ZONE }} --project=$GOOGLE_CLOUD_PROJECT -- "date +'%Y%m%d_%H%M%S'")
              gcloud compute ssh "${{ secrets.GCP_VM_USERNAME }}@${{ secrets.GCP_VM_INSTANCE_NAME }}" --zone=${{ secrets.GCP_VM_ZONE }} --project=$GOOGLE_CLOUD_PROJECT -- "mkdir -p '$BACKUP_PATH' && cp '$DEPLOY_PATH/$file' '$BACKUP_PATH/${file}-$backup_date'"
            else
              echo "$file does not exist in the deploy path, skipping backup."
            fi
            
            echo "Deploying $file to your specific VM"
            gcloud compute scp "$file" "${{ secrets.GCP_VM_USERNAME }}@${{ secrets.GCP_VM_INSTANCE_NAME }}:$DEPLOY_PATH/$file" --zone=${{ secrets.GCP_VM_ZONE }} --project=$GOOGLE_CLOUD_PROJECT
          done
